package brite.Main;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JTextField;

public class Gui_CenGLPConf {
	public void MakeGLPConfFile(int nodeNum,double p,double beta) {
		try {
			BufferedWriter bw = new BufferedWriter(new FileWriter(new File(
					"GUI_GEN.conf")));
			System.out.println("zhangyanyan created GUI_GEN.conf " );
			bw.write("#This config file was generated by the BRITE GUI. ");
			bw.newLine();
			bw.newLine();
			bw.write("BriteConfig");
			bw.newLine();
			bw.newLine();
			
			WriteConf(bw,nodeNum,p,beta);

			bw.newLine();
			bw.write("BeginOutput");
			bw.newLine();
			bw.write("\tBRITE = ");
			
			bw.write("1 ");
			
			bw.write("\t #1/0=enable/disable output in BRITE format");
			bw.newLine();
			

			bw.write("EndOutput");
			bw.newLine();
			bw.flush();
			bw.close();
		} catch (IOException e) {
			System.out.println("[BRITE ERROR]:  Cannot create config file. ");
			e.printStackTrace();
			return;
		}
	}
	
	 public void WriteConf(BufferedWriter bw,int nodeNum,double p,double beta ) {
	      
			double bwMin = (double)10.0;
			double bwMax = (double)1024.0;
			
			int bwDist = 1;  //initialize to constant
			

		     
			String modelType = "RT_GLP";
			
			WriteBarabasiConf(bw,bwDist,bwMin,bwMax,nodeNum,p,beta);
			
	 }
	 
	 public double getNumFromTextField(JTextField c, double defVal) {
			if (!c.isEnabled())
			    return -1;
			String nstr = c.getText();
			Double n=new Double(defVal);
			try {
			    n = new Double(nstr);
			} 
			catch (Exception e) { 
			    System.out.println("error in getNumFromTextField, nstr="+nstr+"  , exception=" + e);
			    return -1; /*err*/
			}
			return n.doubleValue();
		    }
	
	 
	 //write  detailed information to GUI_GEN 
	 
	 public void WriteBarabasiConf(BufferedWriter bw,int bwDist,double bwMin,double bwMax,int nodeNum,double p,double beta) {
		 /*TextField vals*/
			int m = 1;
			int HS = 100;
			int LS = 100;
			int N = nodeNum;
			/*ComboBox vals*/
			
			int np = 1;
			
			double pValue= p;
			double betaValue=beta;
			
			try {	
			    bw.write("BeginModel");	                
			    bw.newLine();

				bw.write("\t Name=11 \t\t #Router GLP=11, AS GLP=12");
			                   
			    bw.newLine();
			    bw.write("\tN = "+N+"\t\t #Number of nodes in graph"); 	                
			    bw.newLine();
			    bw.write("\tHS = " + HS+"\t\t #Size of main plane (number of squares)");               
			    bw.newLine();
			    bw.write("\tLS = " + LS+"\t\t #Size of inner planes (number of squares)");              
			    bw.newLine();
			    bw.write("\tNodePlacement = " + np+"\t\t #Random = 1, Heavy Tailed = 2"); 	
			    bw.newLine();
			    bw.write("\tm = "+m+"\t\t\t #Number of neighboring node each new node connects to.");                   
			    bw.newLine();
			    bw.write("\tBWDist = " + bwDist+"\t\t #Constant = 1, Uniform =2, HeavyTailed = 3, Exponential =4");      
			    bw.newLine();
			    bw.write("\tBWMin = " + bwMin);         
			    bw.newLine();
			    bw.write("\tBWMax = " + bwMax);         
			    bw.newLine();
			  
			    
				bw.write("\t p = " +pValue+"\t\t #Probability of adding links");
				bw.newLine();
				bw.write("\t beta = " + betaValue+"\t\t #linear shift");
				bw.newLine();
			    
			    
			    bw.write("EndModel"); 
			    bw.newLine();
			}    
			catch (IOException e) {
			    System.out.println("[BRITE ERROR]: Could not create config file. " + e);
			    System.exit(0);
			}
	 }

}
